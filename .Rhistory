train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=0.7,x.intersp=0.2,ncol=3)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=1,x.intersp=0.3, y.intersep=0.3, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
#draw polyline
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=1,x.intersp=0.3,y.intersp=0.3, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=0.5,x.intersp=0.3,y.intersp=0.3, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=0.5,x.intersp=0.5,y.intersp=0.5, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,1,3,5),cex=0.7,x.intersp=0.5,y.intersp=0.7, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result <- function(grid.ind, ahead){
#prev.len = 0
pred.len = ahead
#var prediction
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, 1)
max.value = max(validate.mat.list[[3]][grid.ind,])
#set up the plot
plot.new()
plot.window(xlim=c(1,50), ylim=c(0,1.01*max.value))
interval = 24
time.seq = seq(from=1,to=pred.len,by=interval)
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*57
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,pred.len)
labels.time.vec = gen.workday.time.vec(valid.time.list[[1]], pred.len, interval)
axis(1,at=time.seq,labels=labels.time.vec)
axis(2)
title(main="Prediction Results For Different Data Sources",xlab="time",ylab="# of people")
legend("topleft",c("taxi","bicycle","twitter","multiple_source","single_source"),col=c(33,"red","blue",33,33), lty=c(1,1,1,3,5),cex=0.7,x.intersp=0.5,y.intersp=0.7, ncol=2)
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[1]][grid.ind,1:pred.len],col="blue")
#plot twitter validated data(by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,1],lty=3,col="blue")
#plot twitter predicted data(by 1 hour)
twit.single = predict.single.value(mix.mat.list[[1]][grid.ind,], validate.mat.list[[1]][grid.ind,], pred.len, 4)
lines(1:pred.len,twit.single,lty=5,col="blue")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[2]][grid.ind,1:pred.len],col="red")
#plot bicycle validated data(1 by 1 hour)
lines(1:pred.len, pred.mat[1:pred.len,2],lty=3,col="red")
#plot bicycle predicted data(1 by 1 hour)
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,], validate.mat.list[[2]][grid.ind,], pred.len, 4)
lines(1:pred.len, bike.single,lty=5,col="red")
#--------------------------------------------------------------------------------------
#plot the real value
lines(1:pred.len,validate.mat.list[[3]][grid.ind,1:pred.len])
#plot taxi validated data(1 by 1 hour)
lines(1:pred.len,pred.mat[1:pred.len,3],lty=3,col=33)
#plot taxi predicted data(1 by 1 hour)
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,], validate.mat.list[[3]][grid.ind,], pred.len, 4)
lines(1:pred.len,taxi.single,lty=5,col=33)
}
plot.predict.result(4,48)
plot.predict.result(9,48)
plot.predict.result(9,48)
plot.predict.result(2,48)
plot.predict.result(9,48)
plot.predict.result(12,48)
plot.predict.result(15,48)
predict.single.value <- function(train.vec, validate.vec, pred.len, lag)
{
ntrain = length(train.vec)
train.data = data.frame('x1'=train.vec[(ntrain-1):(lag+1-1)])
if(lag > 1)
{
for(i in 2:lag)
train.data[[paste('x',i,sep='')]] = train.vec[(ntrain-i):(lag+1-i)]
}
y = train.vec[ntrain:(lag+1)]
lm.model = lm(y~.,data = train.data)
input.vec = c()
for(i in 1:lag)
input.vec[i] = train.vec[ntrain-i+1]
pred.vec = c()
for(i in 1:pred.len){
val = lm.model$coefficients[1]
for(j in 1:lag)
val = val + lm.model$coefficients[j+1] * input.vec[j]
pred.vec[i] = val
input.vec = input.vec[-lag]
input.vec = c(validate.vec[i], input.vec)
train.data = rbind(train.data,input.vec)
lm.model = lm(y~.,data = train.data)
}
return (pred.vec)
}
validate.predict.accuracy(4,48,1)
predict.single.value <- function(train.vec, validate.vec, pred.len, lag)
{
ntrain = length(train.vec)
train.data = data.frame('x1'=train.vec[(ntrain-1):(lag+1-1)])
if(lag > 1)
{
for(i in 2:lag)
train.data[[paste('x',i,sep='')]] = train.vec[(ntrain-i):(lag+1-i)]
}
y = train.vec[ntrain:(lag+1)]
lm.model = lm(y~.,data = train.data)
input.vec = c()
for(i in 1:lag)
input.vec[i] = train.vec[ntrain-i+1]
pred.vec = c()
for(i in 1:pred.len){
val = lm.model$coefficients[1]
for(j in 1:lag)
val = val + lm.model$coefficients[j+1] * input.vec[j]
pred.vec[i] = val
input.vec = input.vec[-lag]
input.vec = c(validate.vec[i], input.vec)
train.data = rbind(train.data,input.vec)
y = c(validate.vec[i],y)
lm.model = lm(y~.,data = train.data)
}
return (pred.vec)
}
predict.single.value(mix.mat.list[[1]][1,],validate.mat.list[[1]][1,],24,1)
predict.single.value(mix.mat.list[[1]][1,],validate.mat.list[[1]][1,],24,4)
validate.predict.accuracy(5,24,1)
list.all.predict.accuracy <- function(grid.ind, ahead, by.unit){
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, by.unit)
accuracy = c()
##############################################################################
#twit
twit.validate = validate.mat.list[[1]][grid.ind,1:ahead]
accuracy[1] = sqrt(sum((pred.mat[,1]-twit.validate)^2) / sum(twit.validate^2))
#bike
bike.validate = validate.mat.list[[2]][grid.ind,1:ahead]
accuracy[2] = sqrt(sum((pred.mat[,2]-bike.validate)^2) / sum(bike.validate^2))
#taxi
taxi.validate = validate.mat.list[[3]][grid.ind,1:ahead]
accuracy[3] = sqrt(sum((pred.mat[,3]-taxi.validate)^2) / sum(taxi.validate^2))
##############################################################################
#twit
twit.single =predict.single.value(mix.mat.list[[1]][grid.ind,],validate.mat.list[[1]][grid.ind,],ahead,4)
accuracy[4] = sqrt(sum((twit.single-twit.validate)^2) / sum(twit.validate^2))
#bike
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,],validate.mat.list[[2]][grid.ind,],ahead,4)
accuracy[5] = sqrt(sum((bike.single-bike.validate)^2) / sum(bike.validate^2))
#taxi
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,],validate.mat.list[[3]][grid.ind,],ahead,4)
accuracy[6] = sqrt(sum((taxi.single-taxi.validate)^2) / sum(taxi.validate^2))
return (accuracy)
}
predict.single.value <- function(train.vec, validate.vec, pred.len, lag)
{
ntrain = length(train.vec)
train.data = data.frame('x1'=train.vec[(ntrain-1):(lag+1-1)])
if(lag > 1)
{
for(i in 2:lag)
train.data[[paste('x',i,sep='')]] = train.vec[(ntrain-i):(lag+1-i)]
}
y = train.vec[ntrain:(lag+1)]
lm.model = lm(y~.,data = train.data)
input.vec = c()
for(i in 1:lag)
input.vec[i] = train.vec[ntrain-i+1]
pred.vec = c()
for(i in 1:pred.len){
val = lm.model$coefficients[1]
for(j in 1:lag)
val = val + lm.model$coefficients[j+1] * input.vec[j]
pred.vec[i] = val
input.vec = input.vec[-lag]
input.vec = c(validate.vec[i], input.vec)
train.data = rbind(train.data,input.vec)
y = c(validate.vec[i],y)
lm.model = lm(y~.,data = train.data)
}
return (pred.vec)
}
debugSource('~/CodeSpace/R/crowd_stream/VARCluster.r')
get.all.prediction <- function(ahead)
{
preds.mat = matrix(nrow=6,ncol=ngrids)
for(i in 1:ngrids)
{
pred.vec = list.all.predict.accuracy(i, ahead, 1)
preds.mat[,i]= 1 - pred.vec
}
return (preds.mat)
}
predict.single.value(mix.mat.list[[1]][1,],validate.mat.list[[1]][1,],24,4)
y
train.data
length(y)
train.vec[740:764]
head(train.data)
ntrain
train.vec[740:768]
y[740:768]
nrow(train.vec)
row(train.vec)
mrow(train.data)
nrow(train.data)
head(y)
lm.model
predict.single.value <- function(train.vec, validate.vec, pred.len, lag)
{
ntrain = length(train.vec)
train.data = data.frame('x1'=train.vec[(ntrain-1):(lag+1-1)])
if(lag > 1)
{
for(i in 2:lag)
train.data[[paste('x',i,sep='')]] = train.vec[(ntrain-i):(lag+1-i)]
}
y = train.vec[ntrain:(lag+1)]
lm.model = lm(y~.,data = train.data)
input.vec = c()
for(i in 1:lag)
input.vec[i] = train.vec[ntrain-i+1]
pred.vec = c()
for(i in 1:pred.len){
val = lm.model$coefficients[1]
for(j in 1:lag)
val = val + lm.model$coefficients[j+1] * input.vec[j]
pred.vec[i] = val
input.vec = input.vec[-lag]
input.vec = c(validate.vec[i], input.vec)
train.data = rbind(input.vec,train.data)
y = c(validate.vec[i],y)
lm.model = lm(y~.,data = train.data)
}
return (pred.vec)
}
list.all.predict.accuracy(4,24,1)
list.all.predict.accuracy(2,24,1)
list.all.predict.accuracy(1,24,1)
list.all.predict.accuracy <- function(grid.ind, ahead, by.unit){
pred.mat = var.predict.grid.dynamic(grid.ind, ahead, by.unit)
accuracy = c()
##############################################################################
#twit
twit.validate = validate.mat.list[[1]][grid.ind,1:ahead]
accuracy[1] = sqrt(sum((pred.mat[,1]-twit.validate)^2) / sum(twit.validate^2))
#bike
bike.validate = validate.mat.list[[2]][grid.ind,1:ahead]
accuracy[2] = sqrt(sum((pred.mat[,2]-bike.validate)^2) / sum(bike.validate^2))
#taxi
taxi.validate = validate.mat.list[[3]][grid.ind,1:ahead]
accuracy[3] = sqrt(sum((pred.mat[,3]-taxi.validate)^2) / sum(taxi.validate^2))
##############################################################################
#twit
twit.single =predict.single.value(mix.mat.list[[1]][grid.ind,],validate.mat.list[[1]][grid.ind,],ahead,6)
accuracy[4] = sqrt(sum((twit.single-twit.validate)^2) / sum(twit.validate^2))
#bike
bike.single = predict.single.value(mix.mat.list[[2]][grid.ind,],validate.mat.list[[2]][grid.ind,],ahead,6)
accuracy[5] = sqrt(sum((bike.single-bike.validate)^2) / sum(bike.validate^2))
#taxi
taxi.single = predict.single.value(mix.mat.list[[3]][grid.ind,],validate.mat.list[[3]][grid.ind,],ahead,6)
accuracy[6] = sqrt(sum((taxi.single-taxi.validate)^2) / sum(taxi.validate^2))
return (accuracy)
}
list.all.predict.accuracy(4,24,1)
