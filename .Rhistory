library(stats)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
library(stats)
library(Hmisc)
library(car)
library(urca)
library(stats)
install.packages("Hmisc")
install.packages("cluster")
install.packages("Hmisc")
library(Hmisc)
library(car)
library(urca)
library(stats)
twit_aggr = apply(t_mat,1,sum)
bike_s_aggr = apply(bicycle_start,1,sum)
bike_e_aggr = apply(bicycle_end,1,sum)
taxi_s_aggr = apply(taxi_start,1,sum)
taxi_e_aggr = apply(taxi_end,1,sum)
mixed_df = data.frame(twit_aggr,bike_s_aggr,bike_e_aggr,taxi_s_aggr,taxi_e_aggr)
corr_mat = data.matrix(mixed_df)
rcorr(corr_mat)
scatterplotMatrix(~twit_aggr+bike_s_aggr+bike_e_aggr+taxi_s_aggr+taxi_e_aggr,data=mixed_df,
main="Scatterplot Matrix of Different Data Sources",smoother=FALSE)
bike_e_aggr[1,1:100]
bike_e_aggr[]
bike_s_aggr[]
ts.tw = c()
bs.tw = c()
ts.bs = c()
ngrids = nrow(t_mat)
for( i in 1:ngrids){
ts.tw[i] = cor(taxi_start_sep[i,], t_mat[i,])
bs.tw[i] = cor(bicycle_start_sep[i,],t_mat[i,])
ts.bs[i] = cor(taxi_start_sep[i,],bicycle_start_sep[i,])
}
temp.corr.mat = data.matrix(data.frame(ts.tw,bs.tw,ts.bs))
barplot(t(temp.corr.mat),
beside=TRUE,
main="The Temporal Linear Correlation between Different Data Sources In Each Grid",
ylab = "the correlation",
xlab = "all the grids",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
temp.corr.mat
ts.tw = c()
bs.tw = c()
ts.bs = c()
ngrids = nrow(t_mat)
for( i in 1:ngrids){
ts.tw[i] = cor(taxi_start[i,], t_mat[i,])
bs.tw[i] = cor(bicycle_start[i,],t_mat[i,])
ts.bs[i] = cor(taxi_start[i,],bicycle_start[i,])
}
temp.corr.mat = data.matrix(data.frame(ts.tw,bs.tw,ts.bs))
barplot(t(temp.corr.mat),
beside=TRUE,
main="The Temporal Linear Correlation between Different Data Sources In Each Grid",
ylab = "the correlation",
xlab = "all the grids",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
sum(bicycle_start[6,])
sum(bicycle_start[1,])
sum(bicycle_start[15,])
sum(bicycle_start[2,])
sum(bicycle_start[3,])
sum(bicycle_start[4,])
sum(bicycle_start[5,])
sum(bicycle_start[6,])
sum(bicycle_start[7,])
sum(bicycle_start[8,])
sum(bicycle_start[9,])
rcorr(corr_mat)
scatterplotMatrix(~twit_aggr+bike_s_aggr+bike_e_aggr+taxi_s_aggr+taxi_e_aggr,data=mixed_df,
main="Scatterplot Matrix of Different Data Sources",smoother=FALSE)
bicycle_start[1,1:100]
bicycle_end[1,1:100]
sum(bicycle_end[1,])
sum(bicycle_start[1,])
ts.tw = c()
bs.tw = c()
ts.bs = c()
ngrids = nrow(t_mat)
for( i in 1:ngrids){
ts.tw[i] = cor(taxi_start[i,], t_mat[i,])
bs.tw[i] = cor(bicycle_start[i,],t_mat[i,])
ts.bs[i] = cor(taxi_start[i,],bicycle_start[i,])
}
temp.corr.mat = data.matrix(data.frame(ts.tw,bs.tw,ts.bs))
barplot(t(temp.corr.mat),
beside=TRUE,
main="The Temporal Linear Correlation between Different Data Sources In Each Grid",
ylab = "the correlation",
xlab = "all the grids",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="The Temporal Linear Correlation between Different Data Sources In Each Grid",
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.7;
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.7,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.9,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.9,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.9,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.9,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.4,yjust=0.65,x.intersp=0.3))
barplot(t(temp.corr.mat),
beside=TRUE,
main="Temporal Correlation between Different Data Sources In Each Grid",
cex.main = 0.9,
ylab = "the correlation value",
xlab = "the grids(from 1...n)",
ylim = c(-0.1,1),
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.6,yjust=0.65,x.intersp=0.3))
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-22),
ylab = "value of the cointegration test statistic",
xlab = "all the grids",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.6,x.intersp=0.3))
}
urdf2vec <- function(urdf){
n = length(urdf)
vec = c()
for(i in 1:n){
vec[i] = urdf[[i]]@teststat[1,1]
}
return (vec)
}
compute.cointegration <- function(dep.mat, indep.mat)
{
#dep.mat = bicycle_end_sep
#indep.mat = t_mat
ngrids = nrow(dep.mat)
uroot.test.value = list()
for(i in 1:ngrids)
{
reg.line = lm(dep.mat[i,] ~ indep.mat[i,])
residuals = reg.line$residuals
uroot.test.value = append(uroot.test.value, ur.df(residuals,type="none"))
}
return (uroot.test.value)
}
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-22),
ylab = "value of the cointegration test statistic",
xlab = "all the grids",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.6,x.intersp=0.3))
}
plot.cointegration()
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-30),
ylab = "value of the cointegration test statistic",
xlab = "all the grids",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.5,yjust=0.6,x.intersp=0.3))
}
plot.cointegration()
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-28),
ylab = "value of the cointegration test statistic",
xlab = "all the grids",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.6,yjust=0.6,x.intersp=0.3))
}
plot.cointegration()
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-28),
ylab = "value of the cointegration test statistic",
xlab = "all the grids(from 1...n)",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.65,yjust=0.6,x.intersp=0.3))
}
plot.cointegration()
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
print(ts.tw[[1]]$cval)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-28),
ylab = "value of the cointegration test statistic",
xlab = "all the grids(from 1...n)",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.65,yjust=0.6,x.intersp=0.3))
}
plot.cointegration()
tlist =  compute.cointegration(taxi_start, t_mat)
tlist[[1]]
tlist[[1]]$cval
tlist[[1]]2cval
tlist[[1]]@cval
tlist[[2]]@cval
tlist[[15]]@cval
plot.cointegration <-function(){
ts.tw = compute.cointegration(taxi_start, t_mat)
ts.tw.vec = urdf2vec(ts.tw)
bs.tw = compute.cointegration(bicycle_start, t_mat)
bs.tw.vec = urdf2vec(bs.tw)
ts.bs = compute.cointegration(taxi_start, bicycle_start)
ts.bs.vec = urdf2vec(ts.bs)
cointe.mat = data.matrix(data.frame(ts.tw.vec,bs.tw.vec,ts.bs.vec))
barplot(t(cointe.mat),
beside=TRUE,
main="The Cointegration Tests In Each Grid",
ylim = c(0,-28),
ylab = "value of the cointegration test statistic",
xlab = "all the grids(from 1...n)",
legend=c("taxi vs. twitter","bicycle vs. twitter","taxi vs. bicycle"),
args.legend = list("topright", cex=0.8,bty = "n",xjust=0.65,yjust=0.6,x.intersp=0.3))
}
library(vars)
install.packages("vars")
library(vars)
gen.workday.time.list <- function(beg.time,period){
diff.hour = as.difftime("01:00:00","%H:%M:%S")
time.list = list()
k = 1
for(i in 1:period){
time = as.POSIXlt(beg.time + (i-1) * diff.hour)
if(time$wday > 0 && time$wday < 6)
{
time.list[[k]] = time
k = k + 1
}
}
return (time.list)
}
gen.workday.time.list <- function(beg.time,period){
diff.hour = as.difftime("01:00:00","%H:%M:%S")
time.list = list()
k = 1
for(i in 1:period){
time = as.POSIXlt(beg.time + (i-1) * diff.hour)
if(time$wday > 0 && time$wday < 6)
{
time.list[[k]] = time
k = k + 1
}
}
return (time.list)
}
generate.validate.dataset <- function(original.data.mat, beg.time, valid.btime.ind, predict.len)
{
r = nrow(original.data.mat)
c= ncol(original.data.mat)
validate.dataset = matrix(nrow=r,ncol=0)
diff.hour = as.difftime("01:00:00","%H:%M:%S")
k = 0
for(j in valid.btime.ind:c){
time = as.POSIXlt(beg.time + (j-1) * diff.hour)
if(time$wday != 6 && time$wday != 0)
{
validate.dataset = cbind(validate.dataset, original.data.mat[,j])
k=k+1
if(k == predict.len)
break
}
}
return (validate.dataset)
}
generate.train.dataset <- function(original.data.mat, beg.time, train.period)
{
r = nrow(original.data.mat)
train.dataset = matrix(nrow=r,ncol=0)
diff.hour = as.difftime("01:00:00","%H:%M:%S")
for(j in 1:train.period){
time = as.POSIXlt(beg.time + (j-1) * diff.hour)
if(time$wday != 6 && time$wday != 0)
{
train.dataset = cbind(train.dataset, original.data.mat[,j])
}
}
return (train.dataset)
}
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*29 - 1
twit.train.mat = generate.train.dataset(t_mat,btime,train.period)
bicycle.train.mat = generate.train.dataset(bicycle_start,btime,train.period)
taxi.train.mat = generate.train.dataset(taxi_start,btime,train.period)
train.time.list = gen.workday.time.list(btime,train.period)
gen.workday.time.list <- function(beg.time,period){
diff.hour = as.difftime("01:00:00","%H:%M:%S")
time.list = list()
k = 1
for(i in 1:period){
time = as.POSIXlt(beg.time + (i-1) * diff.hour)
if(time$wday > 0 && time$wday < 6)
{
time.list[[k]] = time
k = k + 1
}
}
return (time.list)
}
btime = strptime("2013-09-01 00:00:00","%Y-%m-%d %H:%M:%S",tz="America/New_York")
train.period = 24*60
twit.train.mat = generate.train.dataset(t_mat,btime,train.period)
bicycle.train.mat = generate.train.dataset(bicycle_start,btime,train.period)
taxi.train.mat = generate.train.dataset(taxi_start,btime,train.period)
train.time.list = gen.workday.time.list(btime,train.period)
valid.period = 24
twit.valid.mat = generate.validate.dataset(t_mat,btime,train.period + 1,valid.period)
bicycle.valid.mat = generate.validate.dataset(bicycle_start,btime,train.period+1,valid.period)
taxi.valid.mat = generate.validate.dataset(taxi_start,btime,train.period+1,valid.period)
valid.btime = (btime + (train.period+1) * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,valid.period)
train.time.list[[700]]
train.time.list[[800]]
train.time.list[[1000]]
train.time.list[[2000]]
train.time.list[[1500]]
train.time.list[[1100]]
train.time.list[[180]]
train.time.list[[1080]]
train.time.list[[1050]]
train.time.list[[1030]]
train.time.list[[1040]]
train.time.list[[1035]]
train.time.list[[1032]]
train.time.list[[1033]]
train.time.list[[1032]]
valid.time.list[[1]]
valid.time.list[[24]]
valid.time.list[[0]]
valid.btime
train.period
btime
btime + 1441 * as.difftime("01:00:00","%H:%M:%S")
valid.period = 24
twit.valid.mat = generate.validate.dataset(t_mat,btime,train.period,valid.period)
bicycle.valid.mat = generate.validate.dataset(bicycle_start,btime,train.period,valid.period)
taxi.valid.mat = generate.validate.dataset(taxi_start,btime,train.period,valid.period)
valid.period = 24
twit.valid.mat = generate.validate.dataset(t_mat,btime,train.period,valid.period)
bicycle.valid.mat = generate.validate.dataset(bicycle_start,btime,train.period,valid.period)
taxi.valid.mat = generate.validate.dataset(taxi_start,btime,train.period,valid.period)
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,valid.period)
valid.time.list[[1]]
valid.time.list[[1]]@wday
valid.time.list[[1]]$wday
valid.time.list[[1]]
taxi.valid.mat[5,]
lengnth(taxi_start[5,])
length(taxi_start[5,])
length(taxi_start[5,1440:1464])
taxi_start[5,1441:1464]
taxi_start[5,(1440-24+1):1440]
length(taxi.train.mat)
length(taxi.train.mat[5,])
1032-24+1
taxi.train.mat[5,1009:1032]
taxi.valid.mat[5:]
taxi.valid.mat[5,]
taxi_start[5,(1464-24+1):1464]
length(taxi_start[5,])
train.period
btime + 1440 * as.difftime("01:00:00","%H:%M:%S")
twit.valid.mat = generate.validate.dataset(t_mat,btime,train.period+1,valid.period)
bicycle.valid.mat = generate.validate.dataset(bicycle_start,btime,train.period+1,valid.period)
taxi.valid.mat = generate.validate.dataset(taxi_start,btime,train.period+1,valid.period)
taxi.valid.mat[5,]
taxi_start[5,1441:1464]
valid.btime = (btime + train.period * as.difftime("01:00:00","%H:%M:%S"))
valid.time.list = gen.workday.time.list(valid.btime,valid.period)
valid.btime.list[[1]]
valid.time.list = gen.workday.time.list(valid.btime,valid.period)
valid.time.list[[1]]
